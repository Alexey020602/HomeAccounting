@page "/Register"
@using Authorization.Contracts
@using Blazored.FluentValidation
@using FluentValidation
@using Shared.Utils.Model
@inject IAuthorizationApi AuthorizationApi
<MudCard Style="max-width: 600px; padding: 20px">
    <EditForm Model="model" OnValidSubmit="LoginAsync">
        <FluentValidationValidator Validator="new ModelValidator(AuthorizationApi)"/>
        <MudStack>
            <MudTextField
                @bind-Text="model.Login"
                Variant="Variant.Outlined"
                Label="Логин"
                For="@(() => model.Login)"/>

            <MudTextField
                @bind-Text="model.UserName"
                Variant="Variant.Outlined"
                Label="Имя пользователя"
                For="@(() => model.UserName)"
            />

            <MudPasswordField
                @bind-Text="model.Password"
                InputType="InputType.Password"
                Variant="Variant.Outlined"
                Label="Пароль"
                For="@(() => model.Password)"
            />

            <MudPasswordField
                @bind-Text="model.ConfirmPassword"
                InputType="InputType.Password"
                Variant="Variant.Outlined"
                Label="Пароль"
                For="@(() => model.ConfirmPassword)"
            />

            <MudGrid Justify="Justify.SpaceBetween">
                <MudItem xs="12" md="4" Class="d-flex flex-column align-center">
                    <MudButton Variant="Variant.Filled" ButtonType="ButtonType.Reset" Color="Color.Secondary"
                               Style="width: 100%">
                        Очистить
                    </MudButton>
                </MudItem>
                <MudItem xs="12" md="4" Class="d-flex flex-column align-center">
                    <MudButton Variant="Variant.Filled" ButtonType="ButtonType.Submit" Color="Color.Primary"
                               Style="width: 100%">
                        Зарегистрироваться
                    </MudButton>
                </MudItem>
            </MudGrid>
        </MudStack>
    </EditForm>
</MudCard>

@code {
    private readonly Model model = new();

    private sealed class Model
    {
        public string Login { get; set; } = "";
        public string UserName { get; set; } = "";
        public string Password { get; set; } = "";
        public string ConfirmPassword { get; set; } = "";

        internal RegistrationRequest CreateRequest()
        {
            return new RegistrationRequest
            {
                Login = Login,
                Username = UserName,
                
                Password = Password
            };
        }
    }

    private sealed class ModelValidator : AbstractValidator<Model>
    {
        public ModelValidator(IAuthorizationApi authorizationApi)
        {
            RuleFor(model => model.Login)
                .Cascade(CascadeMode.Stop)
                .NotEmpty()
                .WithMessage("Необходимо ввести логин")
                .MustAsync(async (login, _) =>
                    !await authorizationApi.CheckLoginExist(login)
                )
                .WithMessage("Логин {PropertyValue} уже существует")
                ;
            RuleFor(model => model.UserName)
                .NotEmpty()
                .WithMessage("Необходимо ввести имя пользователя");

            RuleFor(model => model.Password)
                .Cascade(CascadeMode.Continue)
                .Password();

            RuleFor(model => model.ConfirmPassword)
                .NotEmpty()
                .WithMessage("Необходимо подтвердить пароль")
                .Equal(model => model.Password)
                .WithMessage("Пароли не совпадают");
        }
    }


    private Task LoginAsync()
    {
        return AuthorizationApi.Register(model.CreateRequest());
    }

}