@page "/User/{id:guid}"
@using Authorization.Contracts
@using MaybeResults
@using Shared.Utils.Results
@inject IUsersApi UsersApi

<MudContainer MaxWidth="MaxWidth.Medium">
    @(UserMaybe switch
    {
        null => @<MudProgressCircular Indeterminate="true"/>,
        Some<User> user => @<MudCard>
                                    <MudCardHeader>
                                        <MudText Typo="Typo.h5">@user.Value.UserName</MudText>
                                    </MudCardHeader>
                                    <MudCardContent>
                                        <MudText><strong>ID:</strong> @user.Value.Id</MudText>
                                    </MudCardContent>
                                </MudCard>,
    
        INone<User> error => @<MudAlert Severity="Severity.Error">@error.Message</MudAlert>,
        _ => @<MudAlert Severity="Severity.Error">Неизвестное состояние</MudAlert>})
</MudContainer>

@code {
    [Parameter] public Guid Id { get; set; }
    // private Result<Contracts.User>? UserResult { get; set; }
    private IMaybe<User>? UserMaybe { get; set; }
    protected override async Task OnInitializedAsync()
    {
        UserMaybe = await UsersApi.GetUser(Id).TryAsync();
    }

}