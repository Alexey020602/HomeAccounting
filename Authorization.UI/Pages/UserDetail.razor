@page "/User/{id:guid}"
@using LightResults
@using LightResults.Extensions.ExceptionHandling
@inject IUsersApi UsersApi

<MudContainer MaxWidth="MaxWidth.Medium">
    @if (!UserResult.HasValue)
    {
        <MudProgressCircular Indeterminate="true" />
    }
    else
    {
        @if (UserResult.Value.IsFailure(out var error, out var user))
        {
            <MudAlert Severity="Severity.Error">@error.Message</MudAlert>
        }
        else
        {
            <MudCard>
                <MudCardHeader>
                    <MudText Typo="Typo.h5">@user.UserName</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudText><strong>ID:</strong> @user.Id</MudText>
                </MudCardContent>
            </MudCard>
        }
    }
</MudContainer>

@code {
    [Parameter] public Guid Id { get; set; }
    private Result<Contracts.User>? UserResult { get; set; }
    protected override async Task OnInitializedAsync()
    {
        
        UserResult = await (UsersApi.GetUser(Id)).TryAsync();
    }

}