@page "/Register"
@using FluentValidation
@using MaybeResults
@using Microsoft.Extensions.Logging
@using Shared.Blazor.Components
@using Shared.Blazor.RefitWithResult
@using Shared.Blazor.Validation
@using Shared.Utils
@using Severity = MudBlazor.Severity
@inject IAuthorizationApi AuthorizationApi
@inject IValidator<RegistrationModel> ModelValidator
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<MudCard Style="max-width: 600px; padding: 20px">
    <MudForm @ref="form" Model="registrationModel" 
             Validation="@ModelValidator.ValidateValueAsyncDelegate()">
        <MudStack>
            <MudTextField
                @ref="loginTextField"
                @bind-Value="registrationModel.Login"
                Variant="Variant.Outlined"
                Clearable="Clearable"
                Immediate="Immediate"
                OnlyValidateIfDirty="OnlyValidateIfDirty"
                Label="Логин"
                For="@(() => registrationModel.Login)"/>

            <MudTextField
                @bind-Value="registrationModel.UserName"
                Variant="Variant.Outlined"
                Clearable="Clearable"
                Immediate="Immediate"
                OnlyValidateIfDirty="OnlyValidateIfDirty"
                Label="Имя пользователя"
                For="@(() => registrationModel.UserName)"/>


            <MudTextField
                @bind-Value="registrationModel.Password"
                InputType="@showPasswordFieldText.PasswordFieldType()"
                Variant="Variant.Outlined"
                Clearable="Clearable"
                Immediate="Immediate"
                Adornment="Adornment.End"
                AdornmentIcon="@showPasswordFieldText.PasswordFieldIcon()"
                OnAdornmentClick="@(() => showPasswordFieldText.Toggle())"
                OnlyValidateIfDirty="OnlyValidateIfDirty"
                Label="Пароль"
                For="@(() => registrationModel.Password)"/>


            <MudTextField
                @bind-Value="registrationModel.ConfirmPassword"
                InputType="@showPasswordConfirmationFieldText.PasswordFieldType()"
                Variant="Variant.Outlined"
                Clearable="Clearable"
                Immediate="Immediate"
                Adornment="Adornment.End"
                AdornmentIcon="@showPasswordConfirmationFieldText.PasswordFieldIcon()"
                OnAdornmentClick="@(() => showPasswordConfirmationFieldText.Toggle())"
                OnlyValidateIfDirty="OnlyValidateIfDirty"
                Label="Подтверждение пароля"
                For="@(() => registrationModel.ConfirmPassword)"/>


            <MudGrid Justify="Justify.SpaceBetween">
                <MudItem xs="12" md="4" Class="d-flex flex-column align-center">
                    <MudButton Variant="Variant.Filled" ButtonType="ButtonType.Reset" Color="Color.Secondary"
                               Style="width: 100%">
                        Очистить
                    </MudButton>
                </MudItem>
                <MudItem xs="12" md="4" Class="d-flex flex-column align-center">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@Submit"
                               Style="width: 100%">
                        Зарегистрироваться
                    </MudButton>
                </MudItem>
            </MudGrid>
        </MudStack>
    </MudForm>
</MudCard>

@code {
    private const bool OnlyValidateIfDirty = true;
    private const bool Immediate = true;
    private const bool Clearable = true;
    private bool showPasswordFieldText = false;
    private bool showPasswordConfirmationFieldText = false;
    private readonly RegistrationModel registrationModel = new();
    private MudForm form = new();
    private MudTextField<string> loginTextField = new();

    private async Task Submit()
    {
        await form.Validate();

        if (!form.IsValid)
        {
            return;
        }

        if (await AuthorizationApi.CheckLoginExist(registrationModel.Login))
        {
            var errorText = $"Логин {registrationModel.Login} уже существует";
            loginTextField.ValidationErrors.Add(errorText);
            #pragma warning disable BL0005
            loginTextField.Error = true;
            loginTextField.ErrorText = errorText;
            #pragma warning restore BL0005
            StateHasChanged();
            return;
        }

        if (await LoginAsync().ToMaybe() is INone error)
        {
            Snackbar.ProcessError(error);
            return;
        }
        Snackbar.Add("Вы зарегистрированы", Severity.Success);
        NavigationManager.NavigateTo("login");
    }

    private Task LoginAsync()
    {
        return AuthorizationApi.Register(registrationModel.CreateRequest());
    }

}