@using System.ComponentModel.DataAnnotations
@using Core.Model.Requests
<style>
    .file-upload-area {
        border: 2px dashed #dee2e6;
        transition: all 0.3s ease;
        background: rgba(13, 110, 253, 0.03);
    }

    .file-upload-area:hover {
        border-color: #0d6efd;
        background: rgba(13, 110, 253, 0.05);
    }

    .file-upload-area label {
        cursor: pointer;
        min-height: 150px;
    }
</style>
<MudCard Elevation="5">
    <MudCardContent>
        <EditForm Model="@Model" OnValidSubmit="SendFileRequest">
            <DataAnnotationsValidator/>

            <MudGrid Spacing="3" Justify="Justify.FlexStart">
                <MudItem xs="12">
                    <MudInputLabel>Изображение чека *</MudInputLabel>
                    <div>
                        <MudFileUpload
                            T="IBrowserFile"
                            Hidden="false"
                            Class="file-upload-area border rounded-3 p-4 text-center position-relative"
                            InputClass="absolute mud-width-full mud-height-full"
                            InputStyle="opacity:0"
                            For="@(() => Model.SelectedFile)"
                            Accept="image/*"
                            @bind-Files="Model.SelectedFile">
                            <ActivatorContent>
                                
                                Перетащите, или нажмите для выбора

                            </ActivatorContent>
                            <SelectedTemplate Context="file">
                                @if (file is not null)
                                {
                                    <MudChip
                                        Class="mt-2"
                                        Icon="@Icons.Material.Filled.Image"
                                        T="string"
                                        Text="@file.Name"
                                        OnClose="ClearFile"/>
                                }
                            </SelectedTemplate>
                        </MudFileUpload>
                    </div>
                    @* <MudIconButton Icon="@Icons.Material.Filled.Upload" *@
                    @*                Color="Color.Primary" *@
                    @*                OnClick="() => fileUpload.Click()" *@
                    @*                Size="Size.Large"/> *@
                    @* *@
                    @* <MudText Typo="Typo.body2" Color="Color.TextSecondary" Class="mt-2"> *@
                    @*     Перетащите файл или нажмите для выбора *@
                    @* </MudText> *@
                </MudItem>
                <MudItem xs="12">
                    <div class="d-flex gap-2 justify-end">
                        <MudButton
                            Variant="Variant.Filled"
                            Color="Color.Primary"
                            ButtonType="ButtonType.Submit">
                            Сохранить чек
                        </MudButton>
                        <MudButton
                            Variant="Variant.Outlined"
                            Color="Color.Secondary"
                            Disabled="@(Model.SelectedFile == null)"
                            OnClick="Cancel">
                            Отмена
                        </MudButton>
                    </div>
                </MudItem>
            </MudGrid>
        </EditForm>
    </MudCardContent>
</MudCard>

@code {
    [Parameter] public EventCallback<FileCheckRequest> OnSubmit { get; set; }

    private sealed class FormModel
    {
        [Required(ErrorMessage = "Выберите файл с чеком")]
        public IBrowserFile? SelectedFile { get; set; }

        public FileCheckRequest ToCheckFileRequest()
        {
            return new FileCheckRequest
            {
                FileStream = SelectedFile?.OpenReadStream() ?? throw new Exception("Не выбран файл"),
                AddedTime = DateTimeOffset.Now
            };
        }
    }

    private FormModel Model { get; set; } = new();
    private async Task SendFileRequest() => await OnSubmit.InvokeAsync(Model.ToCheckFileRequest());

    private Task OnChange(InputFileChangeEventArgs args)
    {
        Model.SelectedFile = args.File;

        return Task.CompletedTask;
    }

    private void Cancel()
    {
        Model = new();
    }

    private void ClearFile()
    {
        Model.SelectedFile = null;
    }

}