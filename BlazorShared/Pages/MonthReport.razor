@page "/MonthReport"
@using BlazorShared.Api
@using Core.Model.Report
@using BlazorShared.Components
@using BlazorShared.Forms
@using Core.Reports.Model
@using Microsoft.AspNetCore.Authorization
@using DateRange = Core.Model.Report.DateRange

@attribute [Authorize]

@inject IReportsApi ReportsApi

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudCard Elevation="5">
        <MudCardHeader>
            <MudText Typo="Typo.h5" Color="Color.Primary">Отчет за период</MudText>
        </MudCardHeader>

        <MudCardContent>
            <MudGrid Spacing="3">
                <MudItem xs="12" md="5">
                    <MonthPeriodFilter @bind-Range="dateRange"/>
                    @* <MudDatePicker Label="Год" *@
                    @*                OpenTo="OpenTo.Month" *@
                    @*                FixDay="1" *@
                    @*                @bind-Date="yearAndMonth" *@
                    @*                Variant="Variant.Outlined" *@
                    @*                DateFormat="MMMM yyyy" *@
                    @*                Editable="true"/> *@
                </MudItem>

                <MudItem xs="12" md="2" >
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               FullWidth="true"
                               StartIcon="@Icons.Material.Filled.CalendarMonth"
                               OnClick="LoadReport">
                        Загрузить
                    </MudButton>
                </MudItem>

                <MudItem xs="12">
                    @if (Report is not null)
                    {
                        <MonthReportComponent Report="Report"/>
                    }
                    else if (isLoading)
                    {
                        <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
                    }
                </MudItem>
            </MudGrid>
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {

    // private Months month = MonthsExtensions.GetCurrentMonth();

    private DateRange dateRange;
    // private DateTime begin = DateTimeExtensions.DayOfCurrentMonth(7);
    //
    // private DateTime? Begin
    // {
    //     get => begin;
    //     set => begin = value ?? DateTimeExtensions.DayOfCurrentMonth(7);
    // }
    // private DateTime end = DateTime.Now;
    //
    // private DateTime? End
    // {
    //     get => end;
    //     set => end = value ?? DateTime.Now;
    // }
    private Report? Report { get; set; }
    private bool isLoading;

    private async Task LoadReport()
    {
        try
        {
            isLoading = true;
            Report = await ReportsApi.GetMonthReport(new ReportRequest(dateRange));
        }
        finally
        {
            isLoading = false;
        }
    }
}