@using System.ComponentModel.DataAnnotations

<MudCard Elevation="5">
    <MudCardContent>
        <EditForm Model="@ManualModel" OnValidSubmit="SendManualRequest">
            <DataAnnotationsValidator/>
            <MudGrid Spacing="3" Justify="Justify.FlexStart">
                <MudItem xs="12" md="6">
                    <MudTextField Label="ФН" OnlyValidateIfDirty="true" @bind-Value="ManualModel.Fn" Variant="Variant.Outlined" For="@(() => ManualModel.Fn)"/>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Label="ФД" OnlyValidateIfDirty="true" @bind-Value="ManualModel.Fd" Variant="Variant.Outlined" For="@(() => ManualModel.Fd)" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Label="ФП" OnlyValidateIfDirty="true" @bind-Value="ManualModel.Fp" Variant="Variant.Outlined" For="@(() => ManualModel.Fp)"/>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Label="Сумма" OnlyValidateIfDirty="true" @bind-Value="ManualModel.Sum" Variant="Variant.Outlined" For="@(() => ManualModel.Sum)"/>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudDatePicker Label="Дата покупки" @bind-Date="ManualModel.PurchaseDate" Variant="Variant.Outlined" For="@(() => ManualModel.PurchaseDate)"/>
                </MudItem>
                <MudItem xs="12">
                    <MudStack Row="true" Justify="Justify.FlexEnd">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">
                            Сохранить чек
                        </MudButton>
                        <MudButton ButtonType="ButtonType.Reset" Variant="Variant.Outlined" Color="Color.Error">
                            Отмена
                        </MudButton>
                    </MudStack>
                </MudItem>
            </MudGrid>
        </EditForm>
    </MudCardContent>
</MudCard>


@code {
    [Parameter] public EventCallback<CheckRequest> OnSubmit { get; set; }

    private sealed class ManualInputModel
    {
        [Required(ErrorMessage = "Необходимо ввести ФН чека")]
        public string Fn { get; set; } = "";

        [Required(ErrorMessage = "Необходимо ввести ФД чека")]
        public string Fd { get; set; } = "";

        [Required(ErrorMessage = "Необходимо ввести ФП чека")]
        public string Fp { get; set; } = "";

        [Required(ErrorMessage = "Необходимо ввести сумму чека")]
        public string Sum { get; set; } = "";
        [Required(ErrorMessage = "Необходимо ввести дату покупки")] public DateTime? PurchaseDate { get; set; }

        public CheckRequest ToCheckRequest() => new CheckRequest(Fn, Fd, Fp, Sum, PurchaseDate ?? throw new Exception("Не выбрана дата"));
    }

    private ManualInputModel ManualModel { get; set; } = new();
    private async Task SendManualRequest() => await OnSubmit.InvokeAsync(ManualModel.ToCheckRequest());
    private void CancelManualInput() => ManualModel = new();
}