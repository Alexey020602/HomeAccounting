@page "/"
@page "/Check"
@using System.ComponentModel.DataAnnotations
@using Client.Components
@using Core.Model.Requests

<PageTitle>Загрузка чека</PageTitle>

<div class="receipt-card">
    <h3 class="page-title">Добавление нового чека</h3>

    <EditForm Model="@Model" OnValidSubmit="OnSubmit">
        <DataAnnotationsValidator/>

        <div class="form-grid">
            <div class="form-column">
                <!-- Загрузка изображения -->
                <div class="form-group">
                    <label>Изображение чека <span class="required">*</span></label>
                    <InputFile class="file-input" OnChange="OnChange"/>

                </div>
            </div>
        </div>

        <!-- Кнопки отправки -->
        <div class="form-actions">
            <button type="submit" class="btn btn-primary">
                <i class="fas fa-save"></i> Сохранить чек
            </button>
            <button type="button" class="btn btn-secondary"
                    @onclick="Cancel">
                Отмена
            </button>
        </div>
    </EditForm>
</div>

@if (SavedCheck is not null)
{
    <div class="block">
        <ReceiptComponent Check="SavedCheck"/>
    </div>
}


@code {

    public class FormModel
    {
        [Required(ErrorMessage = "Выберите файл с чеком")]
        public IBrowserFile? SelectedFile { get; set; }

        public Core.Model.Requests.FileCheckRequest ToCheckFileRequest()
        {
            return new FileCheckRequest
            {
                FileStream = SelectedFile?.OpenReadStream() ?? throw new Exception("Не выбран файл"),
                AddedTime = DateTimeOffset.Now
            };
        }
    }

    [Inject] private IChecksApi ChecksApi { get; set; } = null!;
    private readonly FormModel Model = new();
    private Core.Model.ChecksList.Check? SavedCheck { get; set; }

    private async Task OnSubmit()
    {
        SavedCheck = await ChecksApi.GetReceipt(Model.ToCheckFileRequest());
    }

    private Task OnChange(InputFileChangeEventArgs args)
    {
        Model.SelectedFile = args.File;

        return Task.CompletedTask;
    }

    private Task Cancel()
    {
        Model.SelectedFile = null;
        return Task.CompletedTask;
    }

}