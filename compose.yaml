services:
  postgres:
    container_name: postgres
    image: postgres:latest
    networks:
      - my-network
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=11111111
      - PGPORT=5432
    ports:
      - "5432:5432"
    volumes:
      - postgresdata:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
  migrations:
    container_name: migrations
    networks:
      - my-network
    image: migrations_service
    pull_policy: always
    build:
      context: .
      dockerfile: MigrationService/Dockerfile
    environment:
      - DOTNET_ENVIRONMENT=Release
      - ConnectionStrings_DefaultConnection=Host=postgres;Port=5432;Database=Diploma;Username=postgres;Password=11111111;
  api:
    image: api
    pull_policy: always
    build:
      context: .
      dockerfile: Api/Dockerfile
    container_name: api
    depends_on:
      - postgres
    environment:
      - DOTNET_ENVIRONMENT=Release
      - ConnectionStrings_DefaultConnection=Host=postgres;Port=5432;Database=Diploma;Username=postgres;Password=11111111;

  client:
    image: client
    build:
      context: .
      dockerfile: Client/Dockerfile
    container_name: client
    depends_on:
      - api
    expose:
      - 80
    environment:
      - VIRTUAL_HOST=homeaccounting.opolcheniya.keenetic.pro
      - VIRTUAL_PORT=80
      - LETSENCRYPT_HOST=homeaccounting.opolcheniya.keenetic.pro
      - LETSENCRYPT_EMAIL=myemail@mydomain.com

volumes:
  postgresdata:

networks:
  default:
    name: my-network